<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://junyeopp.github.io/</id><title>Try Everything</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2022-03-10T03:23:54+09:00</updated> <author> <name>junyeop</name> <uri>https://junyeopp.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://junyeopp.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://junyeopp.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 junyeop </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>HackerRank SQL 문제</title><link href="https://junyeopp.github.io/posts/hackerrank_sql/" rel="alternate" type="text/html" title="HackerRank SQL 문제" /><published>2022-02-24T00:00:00+09:00</published> <updated>2022-03-10T03:23:22+09:00</updated> <id>https://junyeopp.github.io/posts/hackerrank_sql/</id> <content src="https://junyeopp.github.io/posts/hackerrank_sql/" /> <author> <name>junyeop</name> </author> <category term="DB" /> <summary> SQL Project Planning WITH start AS ( SELECT Start_Date, ROW_NUMBER() OVER(ORDER BY Start_Date) AS rn FROM Projects WHERE Start_date NOT in (SELECT End_Date FROM Projects) ) , end AS ( SELECT End_Date, ROW_NUMBER() OVER(ORDER BY End_Date) AS rn FROM Projects WHERE End_Date NOT in (SELECT Start_Date FROM Projects) ) SELECT start.Start_Date, end.End_Date FROM start JOIN en... </summary> </entry> <entry><title>PostgreSQL + DBeaver 시작하기</title><link href="https://junyeopp.github.io/posts/postgresql_and_dbeaver/" rel="alternate" type="text/html" title="PostgreSQL + DBeaver 시작하기" /><published>2022-02-21T00:00:00+09:00</published> <updated>2022-02-21T00:00:00+09:00</updated> <id>https://junyeopp.github.io/posts/postgresql_and_dbeaver/</id> <content src="https://junyeopp.github.io/posts/postgresql_and_dbeaver/" /> <author> <name>junyeop</name> </author> <category term="DB" /> <summary> 데이터 분석을 위한 SQL 레시피 실습환경을 설정한 과정을 정리하였습니다. PostgreSQL posgres Docker Image를 받아줍니다. docker pull postgres 이제 컨테이너를 만들어줍니다. docker run --name postgres-demo -e POSTGRES_PASSWORD=junyeop -p 5432:5432 -v /Users/junyeop/Documents/try_everything/SQL_Recipe_sample-code:/mnt -d postgres 5432포트를 연결하고 sql파일들이 있는 폴더를 마운트하여 postgres-demo라는 이름의 컨테이너를 만들었습니다. container로 접속... </summary> </entry> <entry><title>이것이 취업을 위한 코딩 테스트다 with 파이썬 - 최단 경로</title><link href="https://junyeopp.github.io/posts/python_for_coding_test_Shortest_path/" rel="alternate" type="text/html" title="이것이 취업을 위한 코딩 테스트다 with 파이썬 - 최단 경로" /><published>2022-01-30T00:00:00+09:00</published> <updated>2022-03-09T18:18:11+09:00</updated> <id>https://junyeopp.github.io/posts/python_for_coding_test_Shortest_path/</id> <content src="https://junyeopp.github.io/posts/python_for_coding_test_Shortest_path/" /> <author> <name>junyeop</name> </author> <category term="Coding Test" /> <summary> 이것이 취업을 위한 코딩 테스트다 with 파이썬을 읽고 필요한 부분을 요약 정리하였습니다. Sortest path Dijkstra 방문하지 않은 노드 중에서 갖아 최단 거리가 짧은 노드를 선택하여 진행한다. 한 단계에 하나의 노드에 대한 최단 거리를 확정하면서 진행된다. 그리디 알고리즘. 각 단계에서 최단 거리가 짧은 노드를 선택할 때 최소 힙 라이브러인 heapq를 이용해 시간복잡도를 O(E log V)로 줄인다. import heapq # graph = edges # distance = 각 노드까지의 최단 거리 def dijkstra(start_node): q = [] heapq.heappush(q, (0,... </summary> </entry> <entry><title>이것이 취업을 위한 코딩 테스트다 with 파이썬 - 그래프 알고리즘</title><link href="https://junyeopp.github.io/posts/python_for_coding_test_Graph_algorithms/" rel="alternate" type="text/html" title="이것이 취업을 위한 코딩 테스트다 with 파이썬 - 그래프 알고리즘" /><published>2022-01-30T00:00:00+09:00</published> <updated>2022-03-10T03:16:29+09:00</updated> <id>https://junyeopp.github.io/posts/python_for_coding_test_Graph_algorithms/</id> <content src="https://junyeopp.github.io/posts/python_for_coding_test_Graph_algorithms/" /> <author> <name>junyeop</name> </author> <category term="Coding Test" /> <summary> 이것이 취업을 위한 코딩 테스트다 with 파이썬을 읽고 필요한 부분을 요약 정리하였습니다. Graph Algorithms Union-Find 경로 압축을 통해 시간 복잡도를 개선할 수 있다. def find_parent(parent, x): if parent[x] != x: parent[x] = find_parent(parent, parent[x]) return parent[x] def union_parent(parent, a, b): a = find_parent(parent, a) b = find_parent(parent, b) if a &amp;lt; b: par... </summary> </entry> <entry><title>이것이 취업을 위한 코딩 테스트다 with 파이썬 - 다이나믹 프로그래밍</title><link href="https://junyeopp.github.io/posts/python_for_coding_test_Dynamic_programming/" rel="alternate" type="text/html" title="이것이 취업을 위한 코딩 테스트다 with 파이썬 - 다이나믹 프로그래밍" /><published>2022-01-30T00:00:00+09:00</published> <updated>2022-03-09T14:51:55+09:00</updated> <id>https://junyeopp.github.io/posts/python_for_coding_test_Dynamic_programming/</id> <content src="https://junyeopp.github.io/posts/python_for_coding_test_Dynamic_programming/" /> <author> <name>junyeop</name> </author> <category term="Coding Test" /> <summary> 이것이 취업을 위한 코딩 테스트다 with 파이썬을 읽고 필요한 부분을 요약 정리하였습니다. Dynamic Programming 한 번 계산된 문제는 다시 계산하지 않도록 하는 알고리즘 정수삼각형 import sys input = sys.stdin.readline n = int(input()) triangle = [list(map(int, input().split())) for _ in range(n)] maxangle = triangle[:] for i in range(1, n): for j in range(0, i): if j - 1 &amp;lt; 0: maxangle[i][j] = maxangle[i - 1][j] + triangle[i][j] ... </summary> </entry> </feed>
